/* File generated by DarkEdifPostBuildTool, part of DarkEdif SDK. 
   DarkEdif license is available at its online repository location.
   Copyright of the Bluewing Client extension and all rights reserved by creator of Bluewing Client.
   
   A native extension needs a Java file to generate a Java class. The class is empty,
   and a native is assumed by presence of CRunBluewing Client in the assets folder.
   This file is required. The Bluewing Client creator may modify the copyright to suit their wishes,
   if they retain the DarkEdif notice (third line).
*/

package Extensions;
import android.util.Log;
import java.nio.ByteBuffer;
import java.io.InputStream;
import java.io.IOException;
import Services.CBinaryFile;
import Runtime.MMFRuntime;
import Objects.CExtension;
import RunLoop.CCreateObjectInfo;
import Conditions.CCndExtension;
import Expressions.CExpExtension;
import Actions.CActExtension;
import Expressions.CValue;
import Expressions.CNativeExpInstance;
import Extensions.CRunBluewing_ClientShutdownThread;

public class CRunBluewing_Client extends CRunExtension
{
	private static boolean inited = false;
	private long cptr;
	public static CRunBluewing_ClientShutdownThread shutdownThreadClass;
	public static Thread shutdownThread;
	public CRunBluewing_Client()
	{
		if (!inited)
		{
			String extFilename = "Bluewing Client.so";
			String assetPath = "darkmmf/" + MMFRuntime.inst.ABI + "/" + extFilename;
			try
			{
				android.util.Log.v("MMFRuntimeNative", "Finding Bluewing Client extension in APK assets...");
				InputStream asset = MMFRuntime.inst.getResources().getAssets().open(assetPath);

				android.util.Log.v("MMFRuntimeNative", "Extracting Bluewing Client extension from asset to file dir...");
				MMFRuntime.inst.inputStreamToFile(asset, extFilename);
				
				android.util.Log.v("MMFRuntimeNative", "Loading Bluewing Client extension from file dir...");
				System.load(MMFRuntime.inst.getFilesDir() + "/" + extFilename);

				android.util.Log.v("MMFRuntimeNative", "Loaded Bluewing Client extension OK!");
				
				inited = true;
			}
			catch (IOException e)
			{
				android.util.Log.e("MMFRuntimeNative", "Couldn't load extension Bluewing Client, asset " + assetPath + " had IO error: " + e.toString());
			}
			catch (UnsatisfiedLinkError e)
			{
				android.util.Log.e("MMFRuntimeNative", "Couldn't load extension Bluewing Client, library " + extFilename + " couldn't be loaded: " + e.toString());
			}
			
			// Set up JavaVM shutdown handler
			if (inited)
			{
				shutdownThreadClass = new CRunBluewing_ClientShutdownThread();
				shutdownThread = new Thread(shutdownThreadClass);
				Runtime.getRuntime().addShutdownHook(shutdownThread);
			}
		}
	}
	
	@Override
	public int getNumberOfConditions()
	{
		return darkedif_getNumberOfConditions(cptr);
	}
	public native int darkedif_getNumberOfConditions(long cptr);
	
	@Override
	public boolean createRunObject(CBinaryFile file, CCreateObjectInfo cob, int version)
	{
		ByteBuffer edPtr = null;
		
		if (file != null)
		{
			edPtr = ByteBuffer.allocateDirect(file.data.length);
			
			edPtr.put(file.data);
			edPtr.position (0);
		}
		
		cptr = darkedif_createRunObject(edPtr, cob, version);
			
		return cptr != 0;
	}
	public native long darkedif_createRunObject(ByteBuffer edPtr, CCreateObjectInfo cob, int version);
	
	@Override
	public int handleRunObject()
	{
		return (int)darkedif_handleRunObject(cptr);
	}
	public native short darkedif_handleRunObject(long cptr);
		
	@Override
	public void displayRunObject()
	{
		darkedif_displayRunObject(cptr);
	}
	public native short darkedif_displayRunObject(long cptr);
	
	@Override
	public void destroyRunObject(boolean bFast)
	{
		darkedif_destroyRunObject(cptr, bFast);
	}
	public native void darkedif_destroyRunObject(long cptr, boolean fast);
	
	@Override
	public void pauseRunObject()
	{
		darkedif_pauseRunObject(cptr);
	}
	public native short darkedif_pauseRunObject(long cptr);
	
	@Override
	public void continueRunObject()
	{
		darkedif_continueRunObject(cptr);
	}
	public native short darkedif_continueRunObject(long cptr);
	
	@Override
	public boolean condition(int num, CCndExtension cnd)
	{
		return darkedif_condition(cptr, num, cnd);
	}
	public native boolean darkedif_condition(long cptr, int num, CCndExtension cnd);
	
	@Override
	public void action(int num, CActExtension act)
	{
		darkedif_action(cptr, num, act);
	}
	public native void darkedif_action(long cptr, int num, CActExtension act);
	
	@Override
	public CValue expression (int num)
	{
		CNativeExpInstance exp = new CNativeExpInstance(this.ho);
		darkedif_expression(cptr, num, exp);
		return exp.result;
	}
	private native void darkedif_expression(long cptr, int num, CNativeExpInstance exp);
	
	// JavaVM shutdown handler. Fusion doesn't appear to have a way of notifying native exts if app is closing down.
	public static native void darkedif_EndApp();
};
